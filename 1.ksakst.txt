1. В чем отличия между понятиями «клиент-серверная архитектура» и «клиент-серверная технология»? Приведите примеры.

Для начала, можно рассмотреть определение понятий технология и архитектура.

Технология — совокупность методов и инструментов для достижения желаемого результата. 

Информационные технологии — приёмы, способы и методы применения средств вычислительной техники при выполнении функций сбора, хранения, обработки, передачи и использования данных; ресурсы, необходимые для сбора, обработки, хранения и распространения информации.
Архитектура системы — принципиальная организация системы, воплощенная в её элементах, их взаимоотношениях друг с другом и со средой, а также принципы, направляющие её проектирование и эволюцию.
Архитектуру делят на логическую и физическую.
Логическая архитектура поддерживает функционирование системы на протяжении всего её жизненного цикла на логическом уровне. Она состоит из набора связанных технических концепций и принципов. 
Цель проектирования физической архитектуры заключается в создании физического, конкретного решения, которое согласовано с логической архитектурой и удовлетворяет установленным системным требованиям.

Т.е., упрощенно, архитектура - это организация системы и взаимодействие элементов в ней. Технология - ресурсы и методы применения вычислительной техники.

К клиент-серверным технологиям относят: web-серверы, серверы приложений, серверы баз данных, файл-серверы, прокси-сервер, файрволы, почтовые серверы, серверы удаленного доступа, клиенты "толстый" (рабочая станция) и "тонкий" (web-браузер) и др.

Архитектура «клиент-сервер» определяет общие принципы организации взаимодействия в сети, где имеются серверы, узлы-поставщики некоторых функций и клиенты, потребители этих функций.

Получается, что с помощью «клиент-серверных технологий» (различных типов серверов и клиентов) создают «клиент-серверную архитектуру» (систему взаимодействия между клиентом и сервером).

-------------------
Web-серверы: изначально представляли доступ к гипертекстовым документам по протоколу HTTP (Huper Text Transfer Protocol). Сейчас поддерживают расширенные возможности, в частности работу с бинарными файлами (изображения, мультимедиа и т.п.).
Серверы приложений: предназначены для централизованного решения прикладных задач в некоторой предметной области. Для этого пользователи имеют право запускать серверные программы на исполнение. Использование серверов приложений позволяет снизить требования к конфигурации клиентов и упрощает общее управление сетью.
Серверы баз данных: серверы баз данных используются для обработки пользовательских запросов на языке SQL. При этом СУБД находится на сервере, к которому и подключаются клиентские приложения.
Файл-серверы: файл-сервер хранит информацию в виде файлов и представляет пользователям доступ к ней. Как правило файл-сервер обеспечивает и определенный уровень защиты от несакционированного доступа.
Прокси-сервер: во-первых, действует как посредник, помогая пользователям получить информацию из Интернета и при этом обеспечивая защиту сети. Во-вторых, сохраняет часто запрашиваемую информацию в кэш-памяти на локальном диске, быстро доставляя ее пользователям без повторного обращения к Интернету.
Файрволы: межсетевые экраны, анализирующие и фильтрующие проходящий сетевой трафик, с целью обеспечения безопасности сети.
Почтовые серверы: представляют услуги по отправке и получению электронных почтовых сообщений.
Серверы удаленного доступа (RAS): эти системы обеспечивают связь с сетью по коммутируемым линиям. Удаленный сотрудник может использовать ресурсы корпоративной ЛВС, подключившись к ней с помощью обычного модема.

Для доступа к тем или иным сетевам сервисам используются клиенты, возможности которых характеризуются понятием «толщины». Оно определяет конфигурацию оборудования и программное обеспечение, имеющиеся у клиента.

Тонкий клиент (англ. thin client) в компьютерных технологиях — компьютер или программа-клиент в сетях с клиент-серверной или терминальной архитектурой, который переносит все или большую часть задач по обработке информации на сервер. Примером тонкого клиента может служить компьютер с браузером, использующийся для работы с веб-приложениями. Данным термином может также называться P2P-клиент, использующий в качестве сервера другие узлы сети. 
Под термином «тонкий клиент» подразумевается достаточно широкий с точки зрения системной архитектуры ряд устройств и программ, которые объединяются общим свойством: возможность работы в терминальном режиме.
Кроме общего случая, выделяют аппаратный "тонкий клиент" (например, Windows- и Linux-терминалы). Такие "тонкие клиенты", работающие в терминальном режиме  — специализированное устройство, принципиально отличное от ПК. Аппаратный "тонкий клиент" не имеет жёсткого диска, использует специализированную локальную ОС (одна из задач которой организовать сессию с терминальным сервером для работы пользователя), не имеет в своём составе подвижных деталей, выполняется в специализированных корпусах с полностью пассивным охлаждением.
"Тонкий клиент", в большинстве случаев, обладает минимальной аппаратной конфигурацией, вместо жёсткого диска для загрузки локальной специализированной ОС используется DOM (DiskOnModule) [модуль с разъёмом IDE, флэш-памятью и микросхемой, реализующей логику обычного жёсткого диска]. В некоторых конфигурациях системы тонкий клиент загружает операционную систему по сети с сервера, используя протоколы PXE, BOOTP, DHCP, TFTP и Remote Installation Services (RIS).

"Толстый клиент" (англ. fat client; rich client; heavy client; thick client) — в архитектуре клиент — сервер — это приложение, обеспечивающее (в противовес "тонкому клиенту") расширенную функциональность независимо от центрального сервера. Часто сервер в этом случае является лишь хранилищем данных, а вся работа по обработке и представлению этих данных переносится на машину клиента.
"Толстый клиент" обладает широким функционалом в отличие от "тонкого" и предоставляет возможность работы даже при обрывах связи с сервером. 

----------------
В «клиент-серверной архитектуре» разделяют: двухзвенную архитектуру (two-tier, 2-tier), трехзвенную (three-tier, 3-tier) и многозвенной (N-tier, Multi-tier).

Трёхзвенная архитектура — архитектурная модель программного комплекса, предполагающая наличие в нём трёх компонентов: клиента, сервера приложений (к которому подключено клиентское приложение) и сервера баз данных (с которым работает сервер приложений).

В двухзвенной архитектуре сервер приложений и сервер баз данных расположены на одном устройстве.

По сравнению с двухзвенной клиент-серверной архитектурой или файл-серверной архитектурой трёхуровневая архитектура обеспечивает, как правило, большую масштабируемость (за счёт горизонтальной масштабируемости сервера приложений и мультиплексирования соединений), большую конфигурируемость (за счёт изолированности уровней друг от друга).

Трехзвенная архитектура может быть расширена до многозвенной (N-tier, Multi-tier) путем выделения дополнительных серверов, каждый из которых будет представлять собственные сервисы и пользоваться услугами прочих серверов разного уровня. 
